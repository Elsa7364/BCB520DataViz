{
  "hash": "7fbd29158b227af268ca5d2243272e10",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Network Practice\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    html-math-method: katex\n    code-copy: true\n    code-fold: true\n    code-tools: true\n    include-in-header:\n      - text: |\n          <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css\"/>\n    include-after-body:\n      - text: |\n          <script src=\"https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js\"></script>\n          <script>\n            const swiper = new Swiper('.swiper', {\n              loop: true,\n              spaceBetween: 30,\n              pagination: {\n                el: '.swiper-pagination',\n                clickable: true,\n              },\n              navigation: {\n                nextEl: '.swiper-button-next',\n                prevEl: '.swiper-button-prev',\n              },\n            });\n          </script>\n\nexecute:\n  warning: false\n  message: false\n  error: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(igraph)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_path <- \"Networksfixed.xlsx\"\n\npeople <- read_excel(file_path, sheet = \"People\")\nrelations <- read_excel(file_path, sheet = \"Relations\")\norg_chart <- read_excel(file_path, sheet = \"Sheet1\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(igraph)\nlibrary(dplyr)\n\n# Load data\npeople <- read_excel(\"Networksfixed.xlsx\", sheet = \"People\")\nrelations <- read_excel(\"Networksfixed.xlsx\", sheet = \"Relations\")\n\n# Create network\ngraph <- tbl_graph(nodes = people, edges = relations, directed = TRUE)\n\n# Plot network\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(aes(color = Advisor), alpha = 0.8) +\n  geom_node_point(aes(color = department), size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void() +\n  labs(title = \"Network of People & Advisor Relationships\",\n       subtitle = \"Edge color = Advisor, Node color = Department\")\n```\n\n::: {.cell-output-display}\n![](Network-Practice_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n# A network based on shared interests from Sheet1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(readxl)\n\n# Load Sheet1\ninterests_raw <- read_excel(\"Networksfixed.xlsx\", sheet = \"Sheet1\")\n\n# Clean: drop blank rows and convert to long format\ninterests_long <- interests_raw %>%\n  filter(!is.na(name)) %>%\n  pivot_longer(-name, names_to = \"interest\", values_to = \"has_interest\") %>%\n  filter(has_interest == 1)  # keep only ones they have\n\n# Create nodes: people + interests\npeople_nodes <- interests_long %>%\n  distinct(name) %>%\n  mutate(type = \"person\")\n\ninterest_nodes <- interests_long %>%\n  distinct(interest) %>%\n  rename(name = interest) %>%\n  mutate(type = \"interest\")\n\nnodes <- bind_rows(people_nodes, interest_nodes)\n\n# Create edges\nedges <- interests_long %>%\n  select(from = name, to = interest)\n\n# Create the bipartite graph\ninterest_graph <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)\n\n# Plot it\nggraph(interest_graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5) +\n  geom_node_point(aes(color = type), size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void() +\n  labs(title = \"Bipartite Network of People and Shared Interests\")\n```\n\n::: {.cell-output-display}\n![](Network-Practice_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# A subset of high-interest areas to reduce clutter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter top interests manually\ntop_interests <- c(\"AI\", \"Lifting\", \"Data Science\", \"Gardening\", \"Movies\")\n\nfiltered_edges <- edges %>%\n  filter(to %in% top_interests)\n\nfiltered_nodes <- nodes %>%\n  filter(name %in% filtered_edges$from | name %in% filtered_edges$to)\n\nfiltered_graph <- tbl_graph(nodes = filtered_nodes, edges = filtered_edges, directed = FALSE)\n\nggraph(filtered_graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.7) +\n  geom_node_point(aes(color = type), size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void() +\n  labs(title = \"Focused Network: People & Top Interests\")\n```\n\n::: {.cell-output-display}\n![](Network-Practice_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(igraph)\n\n# Load data\npeople <- read_excel(\"Networksfixed.xlsx\", sheet = \"People\")\nrelations <- read_excel(\"Networksfixed.xlsx\", sheet = \"Relations\")\n\n# Step 1: Create BCB520-based edges (only between students marked TRUE)\nbcb_edges <- people %>%\n  filter(BCB520 == TRUE) %>%\n  pull(name) %>%\n  combn(2) %>%\n  t() %>%\n  as.data.frame() %>%\n  setNames(c(\"from\", \"to\")) %>%\n  mutate(BCB520 = TRUE,\n         Advisor = FALSE)\n\n# Step 2: Prepare original Advisor edges\nrelations <- relations %>%\n  mutate(Advisor = TRUE,\n         BCB520 = FALSE)\n\n# Step 3: Combine both edge types\nall_edges <- bind_rows(relations, bcb_edges)\n\n# Step 4: Create graph\ngraph <- tbl_graph(nodes = people, edges = all_edges, directed = FALSE)\n\n# Step 5: Plot the network with edge color based on relationship type\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(aes(color = case_when(\n    Advisor ~ \"Advisor\",\n    BCB520 ~ \"BCB520\"\n  )), alpha = 0.8, show.legend = TRUE) +\n  geom_node_point(aes(color = department), size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  scale_edge_color_manual(\n    name = \"Relationship Type\",\n    values = c(\"Advisor\" = \"steelblue\", \"BCB520\" = \"forestgreen\")\n  ) +\n  theme_void() +\n  labs(title = \"Combined Network: Advisor & BCB520 Connections\",\n       subtitle = \"Edge color shows type of connection\")\n```\n\n::: {.cell-output-display}\n![](Network-Practice_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(igraph)\n\n# Load data\npeople <- read_excel(\"Networksfixed.xlsx\", sheet = \"People\")\nrelations <- read_excel(\"Networksfixed.xlsx\", sheet = \"Relations\")\n\n# Create BCB520 edges\nbcb_edges <- people %>%\n  filter(BCB520 == TRUE) %>%\n  pull(name) %>%\n  combn(2) %>%\n  t() %>%\n  as.data.frame() %>%\n  setNames(c(\"from\", \"to\")) %>%\n  mutate(BCB520 = TRUE, Advisor = FALSE)\n\n# Prepare original Advisor edges\nrelations <- relations %>%\n  mutate(Advisor = TRUE, BCB520 = FALSE)\n\n# Combine edges\nall_edges <- bind_rows(relations, bcb_edges)\n\n# Build graph\ngraph <- tbl_graph(nodes = people, edges = all_edges, directed = FALSE)\n\n# Layouts to try\nlayouts <- c(\"fr\", \"kk\", \"graphopt\", \"stress\", \"drl\")\n\n# Create directory if needed\ndir.create(\"plots\", showWarnings = FALSE)\n\n# Generate and save each plot\nfor (lay in layouts) {\n  p <- ggraph(graph, layout = lay) +\n    geom_edge_link(aes(color = case_when(\n      Advisor ~ \"Advisor\",\n      BCB520 ~ \"BCB520\"\n    )), alpha = 0.8) +\n    geom_node_point(aes(color = department), size = 4) +\n    geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n    scale_edge_color_manual(name = \"Relationship Type\",\n                            values = c(\"Advisor\" = \"steelblue\", \"BCB520\" = \"forestgreen\")) +\n    theme_void() +\n    labs(title = paste(\"Network Layout:\", lay),\n         subtitle = \"Comparing layout algorithms\")\n\n  ggsave(filename = paste0(\"plots/network_\", lay, \".png\"), plot = p, width = 10, height = 8)\n}\n```\n:::\n\n\n\n## ðŸ“¸ Network Layout Carousel\n\nBelow are the network layout variations. Use the arrows or dots to scroll through.\n\n<div class=\"swiper\" style=\"width: 100%; max-width: 800px;\">\n  <div class=\"swiper-wrapper\">\n    <div class=\"swiper-slide\"><img src=\"plots/network_fr.png\" style=\"width: 100%; border-radius: 10px;\"></div>\n    <div class=\"swiper-slide\"><img src=\"plots/network_kk.png\" style=\"width: 100%; border-radius: 10px;\"></div>\n    <div class=\"swiper-slide\"><img src=\"plots/network_graphopt.png\" style=\"width: 100%; border-radius: 10px;\"></div>\n    <div class=\"swiper-slide\"><img src=\"plots/network_stress.png\" style=\"width: 100%; border-radius: 10px;\"></div>\n    <div class=\"swiper-slide\"><img src=\"plots/network_drl.png\" style=\"width: 100%; border-radius: 10px;\"></div>\n  </div>\n  <div class=\"swiper-pagination\"></div>\n  <div class=\"swiper-button-prev\"></div>\n  <div class=\"swiper-button-next\"></div>\n</div>\n\n\n",
    "supporting": [
      "Network-Practice_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}