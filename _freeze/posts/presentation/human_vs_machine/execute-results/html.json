{
  "hash": "2ce7c8e7c397e6cdf60f7ed82db403dc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Validating AI Classifications in Research\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    code-copy: true\n    code-fold: true\n    code-tools: true\nexecute:\n  warning: false\n  message: false\n  error: true\njupyter: python3\n---\n\n\n# What the Project Is About?\n\nI'm working on a meta-analysis on polycentric water governance, which means a study that reviews and analyzes research on how different organizations and governments work together to manage water. My goal is to figure out what helps these kinds of shared management systems succeed—making sure they are effective, long-lasting, and fair for everyone involved.\n\n# This the initial pilot phase\n\n## I collected 45 academic papers on polycentric water governance and used AI (LLM) to classify these papers into four categories as each category will be matched with a certain analysis:\n\n-   **Empirical Research → Quantitative meta-analysis**\n-   **Theoretical Research → Thematic qualitative synthesis**\n-   **Case Studies:**\n    -   **Descriptive case studies → Thematic qualitative synthesis**\n    -   **Comparative case studies → Qualitative Comparative Analysis (QCA)**\n-   **Review & Synthesis Studies → Narrative or descriptive synthesis (possibly meta-synthesis)**\n\n## Then I selected 24 papers to manually reading and labeling them myself. Definitely an old school, handson process!\n\n## Finally, I compared my human classifications against the AI classifications and created visualizations of these comparisons.\n\n\n```{r, results='hide'}\nlibrary(reticulate)\n\n# Install required packages\npy_install(\"pandas\")\npy_install(\"numpy\")\npy_install(\"scikit-learn\")\npy_install(\"matplotlib\")\npy_install(\"seaborn\")\n```\n\n```{r, results='hide'}\n# Use your existing environment\nuse_virtualenv(\"r-reticulate\")\n\n# Install just the missing packages\npy_install(\"jupyter\")\npy_install(\"pyyaml\")\n\n```\n\n\n# Here we have a pie chart showing agreement distribution\n\n::: {#ff500d2f .cell dpi='300' fig-height='8' fig-width='10' results='hide' execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Create figure\nplt.figure(figsize=(10, 8))\n\n# Papers breakdown pie chart\npapers = ['Agreements', 'Disagreements']\nvalues = [21, 3]\ncolors = ['#2ecc71', '#e74c3c']\nexplode = (0.05, 0.05)\n\nplt.pie(values, \n        explode=explode, \n        labels=papers, \n        colors=colors, \n        autopct='%1.1f%%',\n        shadow=True, \n        startangle=90)\n\nplt.title('Agreement Distribution\\n(Total Papers: 24)', \n         pad=20, \n         size=14, \n         weight='bold')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n\n# Save figure\nplt.savefig('Analysis_results/agreement_distribution.png', \n            bbox_inches='tight', \n            dpi=300,\n            facecolor='white',\n            pad_inches=0.5)\nplt.close()\n```\n![Agreement Distribution in AI vs Human Classification](human_vs_machine_files/figure-html/cell-2-output-1.png){}\n:::\n\n\n#Here we have a bar chart showing category distributions\n\n::: {#fig-analysis .cell dpi='300' fig-height='10' fig-width='12' execution_count=2}\n``` {.python .cell-code}\nimport os\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import cohen_kappa_score, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create output directory\nos.makedirs('Analysis_results', exist_ok=True)\n\n# Read the CSV file with 'latin1' encoding\ndf = pd.read_csv('ground_truth_labels.csv', encoding='latin1')\n\n# Filter for first 25 papers that have human labels\ndf_analyzed = df.head(25).dropna(subset=['human_category'])\n\n# Calculate metrics\ntotal_papers = len(df_analyzed)\nagreements = (df_analyzed['category'] == df_analyzed['human_category']).sum()\naccuracy = agreements / total_papers\nkappa = cohen_kappa_score(df_analyzed['human_category'], df_analyzed['category'])\n\n# Category distribution analysis\ncategory_stats = pd.DataFrame({\n    'AI_Count': df_analyzed['category'].value_counts(),\n    'Human_Count': df_analyzed['human_category'].value_counts()\n}).fillna(0)\n\n# Create and save category distribution bar plot\nplt.figure(figsize=(12, 10))  # Kept the large figure size\ncategory_stats.plot(kind='bar')\nplt.title('Category Distribution: AI vs Human', size=16, pad=20)\nplt.xlabel('Category', size=12, labelpad=15)\nplt.ylabel('Count', size=12, labelpad=15)\nplt.xticks(rotation=45, ha='right')\nplt.legend(['AI Classification', 'Human Classification'], fontsize=12)\nplt.tight_layout()\nplt.show()\nplt.savefig('Analysis_results/category_distribution.png', bbox_inches='tight', dpi=300)\nplt.close()\n\n# Save analysis results\nanalysis_summary = {\n    'total_papers': total_papers,\n    'accuracy': accuracy,\n    'kappa': kappa,\n    'disagreements': len(disagreements),\n    'timestamp': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')\n}\npd.DataFrame([analysis_summary]).to_csv(\n    'Analysis_results/interim_analysis_metrics.csv', index=False\n)\n\n# Print summary statistics in a cleaner format\nprint(\"\\n### Analysis Summary\")\nprint(f\"- Total papers analyzed: {total_papers}\")\nprint(f\"- Number of agreements: {agreements}\")\nprint(f\"- Number of disagreements: {len(disagreements)}\")\nprint(f\"- Accuracy: {accuracy:.2%}\")\nprint(f\"- Cohen's Kappa: {kappa:.2f}\")\n```\n\n::: {#fig-analysis-1 .cell-output .cell-output-display}\n```\n<Figure size 1152x960 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](human_vs_machine_files/figure-html/fig-analysis-output-2.png){#fig-analysis-2}\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[2]</span><span class=\"ansi-green-fg\">, line 47</span>\n<span class=\"ansi-green-fg\">     40</span> plt.close()\n<span class=\"ansi-green-fg\">     42</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Save analysis results</span>\n<span class=\"ansi-green-fg\">     43</span> analysis_summary = {\n<span class=\"ansi-green-fg\">     44</span>     <span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">total_papers</span><span class=\"ansi-yellow-fg\">'</span>: total_papers,\n<span class=\"ansi-green-fg\">     45</span>     <span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">accuracy</span><span class=\"ansi-yellow-fg\">'</span>: accuracy,\n<span class=\"ansi-green-fg\">     46</span>     <span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">kappa</span><span class=\"ansi-yellow-fg\">'</span>: kappa,\n<span class=\"ansi-green-fg\">---&gt; </span><span class=\"ansi-green-fg\">47</span>     <span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">disagreements</span><span class=\"ansi-yellow-fg\">'</span>: <span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">disagreements</span>),\n<span class=\"ansi-green-fg\">     48</span>     <span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">timestamp</span><span class=\"ansi-yellow-fg\">'</span>: pd.Timestamp.now().strftime(<span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">%</span><span class=\"ansi-yellow-fg\">Y-</span><span class=\"ansi-yellow-fg\">%</span><span class=\"ansi-yellow-fg\">m-</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">%d</span><span class=\"ansi-yellow-fg\"> </span><span class=\"ansi-yellow-fg\">%</span><span class=\"ansi-yellow-fg\">H:</span><span class=\"ansi-yellow-fg\">%</span><span class=\"ansi-yellow-fg\">M:</span><span class=\"ansi-yellow-fg\">%</span><span class=\"ansi-yellow-fg\">S</span><span class=\"ansi-yellow-fg\">'</span>)\n<span class=\"ansi-green-fg\">     49</span> }\n<span class=\"ansi-green-fg\">     50</span> pd.DataFrame([analysis_summary]).to_csv(\n<span class=\"ansi-green-fg\">     51</span>     <span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">Analysis_results/interim_analysis_metrics.csv</span><span class=\"ansi-yellow-fg\">'</span>, index=<span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>\n<span class=\"ansi-green-fg\">     52</span> )\n<span class=\"ansi-green-fg\">     54</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Print summary statistics in a cleaner format</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'disagreements' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "human_vs_machine_files"
    ],
    "filters": [],
    "includes": {}
  }
}