{
  "hash": "e7503435d3370751662b4560e25cc7f8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hockey Ballot Blender\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    html-math-method: katex\n    code-copy: true\n    code-fold: true\n    code-tools: true\nexecute:\n  warning: false\n  message: false\n  error: true\n---\n\n\nInteroperability is the ability of different systems, datasets, or tools to work together seamlessly, whether that means sharing, merging, or analyzing data across different formats or structures.\n\nWhen we tried to merge everyone’s award ballots into one dataset, it quickly became clear how important interoperability is. Everyone had different file types, different column names, and different structures. Without a shared format or standard, combining our work became way harder and took way longer than it should have. Interoperability is basically about making systems and datasets able to talk to each other smoothly. If we had agreed on consistent variable names and formats from the start, the merge would’ve been way easier—and the focus could’ve stayed on the actual analysis, not cleaning up the mess. Definitely a lesson learned for future collab-heavy projects.\n\nIn this assignment, I will merge the datasets, then I will be calculating points from the ballots. Since the awards use a ranked voting system simulating the real NHL voting process, each ballot assigns weighted points—like 10 for 1st place, 7 for 2nd, and so on. To get a final ranking, we’ll add up the points across everyone’s submissions.\n\nThe player (or nominee) with the highest total number of points across all ballots is the winner. In other words, the one with most consistently high-ranked pick across everyone’s votes takes the award (?).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclair <- read_csv(\"Clair_ballots.csv\")\njohn <- read_csv(\"John_ballots.csv\")\nmarwa <- read_csv(\"Marwa_ballots.csv\")\n\npriya <- read_excel(\"Priya_ballots.xlsx\")\nhenry <- read_excel(\"Henry_ballots.xlsx\")\nian <- read_excel(\"Ian_ballots.xlsx\")\nbetsy <- read_excel(\"Betsy_ballots.xlsx\")\nbarrie <- read_excel(\"Barrie_ballots.xlsx\")\njustice <- read_excel(\"Justice_ballots.xlsx\")\n\nsharon <- readRDS(\"sharon_ballot.rds\")\n```\n:::\n\n\n\n# Combine all into one dataframe\n\n## Loop through all data frames and print the column names to spot inconsistencies\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nballots <- list(\n  clair = clair,\n  john = john,\n  marwa = marwa,\n  priya = priya,\n  henry = henry,\n  ian = ian,\n  betsy = betsy,\n  barrie = barrie,\n  justice = justice,\n  sharon = sharon\n)\n\nlapply(ballots, names)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$clair\n[1] \"Voter\"  \"Rank\"   \"Award\"  \"Player\"\n\n$john\n[1] \"Voter\"  \"Award\"  \"Rank\"   \"Player\"\n\n$marwa\n[1] \"Voter\"  \"Rank\"   \"Award\"  \"Player\"\n\n$priya\n[1] \"Voter\"                        \"Rank\"                        \n[3] \"Vezina Trophy\"                \"Hart Memorial Trophy\"        \n[5] \"James Norris Memorial Trophy\" \"Calder Memorial Trophy\"      \n[7] \"Frank J. Selke Trophy\"        \"Lady Byng Memorial Trophy\"   \n\n$henry\n[1] \"Voter\"  \"Award\"  \"Rank\"   \"Player\"\n\n$ian\n[1] \"Voter\"  \"Trophy\" \"Rank\"   \"Player\"\n\n$betsy\n[1] \"Voter\"  \"Award\"  \"Rank\"   \"Player\"\n\n$barrie\n[1] \"Voter\"  \"Award\"  \"Player\" \"Rank\"  \n\n$justice\n[1] \"Voter\"  \"Award\"  \"Player\" \"Rank\"  \n\n$sharon\n[1] \"Player\" \"Rank\"   \"Voter\"  \"Award\" \n```\n\n\n:::\n:::\n\n\n\n## Clean all the tidy/long ones, fix Priya's wide format, and merge!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_tidy_ballot <- function(df) {\n  df %>%\n    janitor::clean_names() %>%\n    dplyr::rename_with(~ gsub(\"trophy\", \"award\", ., ignore.case = TRUE)) %>%\n    dplyr::rename(\n      voter = voter,\n      award = award,\n      rank = rank,\n      player = player\n    ) %>%\n    dplyr::select(voter, award, rank, player)\n}\n\nclean_wide_ballot <- function(df) {\n  df %>%\n    janitor::clean_names() %>%\n    tidyr::pivot_longer(\n      cols = -c(voter, rank),\n      names_to = \"award\",\n      values_to = \"player\"\n    ) %>%\n    dplyr::mutate(rank = as.numeric(rank)) %>%\n    dplyr::select(voter, award, rank, player)\n}\n\ntidy_names <- c(\"clair\", \"john\", \"marwa\", \"henry\", \"ian\", \"betsy\", \"barrie\", \"justice\", \"sharon\")\ntidy_cleaned <- lapply(tidy_names, function(name) clean_tidy_ballot(ballots[[name]]))\npriya_cleaned <- clean_wide_ballot(ballots$priya)\nall_ballots <- dplyr::bind_rows(tidy_cleaned, priya_cleaned)\n\n#checking for inconsistencies\n\nunique(all_ballots$award)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Vezina Trophy\"                \"Hart Memorial Trophy\"        \n [3] \"Frank J. Selke Trophy\"        \"James Norris Memorial Trophy\"\n [5] \"Calder Memorial Trophy\"       \"Lady Byng Memorial Trophy\"   \n [7] \"Calder Memorial\"              \"Hart Memorial\"               \n [9] \"James Norris Memorial\"        \"Vezina\"                      \n[11] \"Frank Selke Memorial\"         \"Lady Byng Memorial\"          \n[13] \"vezina_trophy\"                \"hart_memorial_trophy\"        \n[15] \"james_norris_memorial_trophy\" \"calder_memorial_trophy\"      \n[17] \"frank_j_selke_trophy\"         \"lady_byng_memorial_trophy\"   \n```\n\n\n:::\n\n```{.r .cell-code}\nstandardize_award <- function(award) {\n  award <- tolower(award)\n  award <- gsub(\"_\", \" \", award)\n  award <- trimws(award)\n\n  case_when(\n    str_detect(award, \"hart\") ~ \"Hart Memorial Trophy\",\n    str_detect(award, \"vezina\") ~ \"Vezina Trophy\",\n    str_detect(award, \"norris\") ~ \"James Norris Memorial Trophy\",\n    str_detect(award, \"calder\") ~ \"Calder Memorial Trophy\",\n    str_detect(award, \"selke\") ~ \"Frank J. Selke Trophy\",\n    str_detect(award, \"lady byng\") ~ \"Lady Byng Memorial Trophy\",\n    TRUE ~ str_to_title(award)\n  )\n}\n\nall_ballots <- all_ballots %>%\n  mutate(award = standardize_award(award))\n\nunique(all_ballots$award)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Vezina Trophy\"                \"Hart Memorial Trophy\"        \n[3] \"Frank J. Selke Trophy\"        \"James Norris Memorial Trophy\"\n[5] \"Calder Memorial Trophy\"       \"Lady Byng Memorial Trophy\"   \n```\n\n\n:::\n:::\n\n\n\n# Scoring the votes and rank nominees\n\n## Define the scoring system\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoint_values <- c(`1` = 10, `2` = 7, `3` = 5, `4` = 3, `5` = 1)\n```\n:::\n\n\n\n## Adding a column based on rank\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_ballots <- all_ballots %>%\n  mutate(points = point_values[as.character(rank)])\n```\n:::\n\n\n\n## Calculate total points for player each award\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_scores <- all_ballots %>%\n  group_by(award, player) %>%\n  summarise(\n    total_points = sum(points, na.rm = TRUE),\n    n_votes = n()\n  ) %>%\n  arrange(award, desc(total_points)) %>%\n  ungroup()\nprint(final_scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 216 × 4\n   award                  player           total_points n_votes\n   <chr>                  <chr>                   <dbl>   <int>\n 1 Calder Memorial Trophy Kirill Marchenko           45       5\n 2 Calder Memorial Trophy Wyatt Johnston             40       6\n 3 Calder Memorial Trophy Marco Rossi                17       5\n 4 Calder Memorial Trophy Dylan Holloway             16       3\n 5 Calder Memorial Trophy Bobby Brink                10       1\n 6 Calder Memorial Trophy Jake Sanders               10       1\n 7 Calder Memorial Trophy Kirill Machenko            10       1\n 8 Calder Memorial Trophy Kirill Marchenko           10       1\n 9 Calder Memorial Trophy Nathan Clurman             10       1\n10 Calder Memorial Trophy Marco Rossi                 7       1\n# ℹ 206 more rows\n```\n\n\n:::\n:::\n\n\n\n## Top 3 for each award\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ntop3 <- final_scores %>%\n  group_by(award) %>%\n  slice_max(total_points, n = 3) %>%\n  arrange(award, desc(total_points))\n\nprint(top3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 27 × 4\n# Groups:   award [6]\n   award                        player           total_points n_votes\n   <chr>                        <chr>                   <dbl>   <int>\n 1 Calder Memorial Trophy       Kirill Marchenko           45       5\n 2 Calder Memorial Trophy       Wyatt Johnston             40       6\n 3 Calder Memorial Trophy       Marco Rossi                17       5\n 4 Frank J. Selke Trophy        Brandon Tanev              20       2\n 5 Frank J. Selke Trophy        Jackson Blake              17       2\n 6 Frank J. Selke Trophy        Nathan MacKinnon           15       2\n 7 Hart Memorial Trophy         Leon Draisaitl             35       6\n 8 Hart Memorial Trophy         Nathan MacKinnon           22       3\n 9 Hart Memorial Trophy         Nikita Kucherov            20       3\n10 James Norris Memorial Trophy Ian Cole                   18       3\n# ℹ 17 more rows\n```\n\n\n:::\n:::\n\n\n\n# Rank assignment and distance calculation\n\n## Each player gets an official rank based on their total points (1st place = top scorer).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_ranks <- final_scores %>%\n  group_by(award) %>%\n  arrange(desc(total_points)) %>%\n  mutate(final_rank = row_number()) %>%\n  select(award, player, final_rank)\n```\n:::\n\n\n\n## Joining final rank to individual ballots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nballots_with_ranks <- all_ballots %>%\n  left_join(final_ranks, by = c(\"award\", \"player\"))\n```\n:::\n\n\n\n## Calculating distance from final rank\n\nA good metric could be the sum of absolute differences between a voter's rank and the final rank.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvoter_agreement <- ballots_with_ranks %>%\n  mutate(rank_diff = abs(rank - final_rank)) %>%\n  group_by(voter) %>%\n  summarise(total_difference = sum(rank_diff, na.rm = TRUE)) %>%\n  arrange(total_difference)\n```\n:::\n\n\n\n# The closest voter!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvoter_agreement %>%\n  slice_min(total_difference, n = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  voter total_difference\n  <chr>            <dbl>\n1 John               279\n```\n\n\n:::\n:::\n\n\n\n# Finally here is a ranking of everyone\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(voter_agreement)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   voter          total_difference\n   <chr>                     <dbl>\n 1 John                        279\n 2 Marwa                       285\n 3 Sharon                      322\n 4 Priya                       366\n 5 Claire                      375\n 6 Betsy Church                378\n 7 Justice                     385\n 8 Ian                         399\n 9 Henry Trujillo              425\n10 Barrie                      524\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_diff <- max(voter_agreement$total_difference)\n\nvoter_agreement <- voter_agreement %>%\n  mutate(\n    accuracy = max_diff - total_difference,\n    label = ifelse(total_difference == 0, \"🏆 Perfect!\", as.character(accuracy))\n  )\n\n\nggplot(voter_agreement, aes(x = reorder(voter, accuracy), y = accuracy)) +\n  geom_bar(aes(fill = accuracy), stat = \"identity\") +\n  scale_fill_gradient(low = \"#B0C4DE\", high = \"#1D428A\") +\n  coord_flip() +\n  geom_vline(xintercept = mean(voter_agreement$accuracy), linetype = \"dashed\", color = \"gray40\") +\n  geom_text(\n    aes(label = label),\n    hjust = -0.05,\n    size = 4.2,\n    fontface = \"bold\"\n  ) +\n  labs(\n    title = \"🏒 Voter Power Play Rankings\",\n    subtitle = \"Who nailed the final picks? Accuracy scores based on distance from consensus rankings\",\n    x = \"Voter\",\n    y = \"Accuracy Score\",\n    fill = \"Accuracy\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 12),\n    axis.text.y = element_text(size = 11),\n    axis.text.x = element_text(size = 10),\n    legend.position = \"bottom\"\n  ) +\n  expand_limits(y = max(voter_agreement$accuracy) * 1.1)\n```\n\n::: {.cell-output-display}\n![](Hockey_Challenge_files/figure-html/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "Hockey_Challenge_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}