{
  "hash": "b2605fb6ed5e244fd735fe27c3f117ad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hockey Ballot Blender\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    html-math-method: katex\n    code-copy: true\n    code-fold: true\n    code-tools: true\nexecute:\n  warning: false\n  message: false\n  error: true\n---\n\n\nInteroperability is the ability of different systems, datasets, or tools to work together seamlessly, whether that means sharing, merging, or analyzing data across different formats or structures.\n\nWhen we tried to merge everyone‚Äôs award ballots into one dataset, it quickly became clear how important interoperability is. Everyone had different file types, different column names, and different structures. Without a shared format or standard, combining our work became way harder and took way longer than it should have. Interoperability is basically about making systems and datasets able to talk to each other smoothly. If we had agreed on consistent variable names and formats from the start, the merge would‚Äôve been way easier‚Äîand the focus could‚Äôve stayed on the actual analysis, not cleaning up the mess. Definitely a lesson learned for future collab-heavy projects.\n\nIn this assignment, I will merge the datasets, then I will be calculating points from the ballots. Since the awards use a ranked voting system simulating the real NHL voting process, each ballot assigns weighted points‚Äîlike 10 for 1st place, 7 for 2nd, and so on. To get a final ranking, we‚Äôll add up the points across everyone‚Äôs submissions.\n\nThe player (or nominee) with the highest total number of points across all ballots is the winner. In other words, the one with most consistently high-ranked pick across everyone‚Äôs votes takes the award (?).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclair <- read_csv(\"Clair_ballots.csv\")\njohn <- read_csv(\"John_ballots.csv\")\nmarwa <- read_csv(\"Marwa_ballots.csv\")\n\npriya <- read_excel(\"Priya_ballots.xlsx\")\nhenry <- read_excel(\"Henry_ballots.xlsx\")\nian <- read_excel(\"Ian_ballots.xlsx\")\nbetsy <- read_excel(\"Betsy_ballots.xlsx\")\nbarrie <- read_excel(\"Barrie_ballots.xlsx\")\njustice <- read_excel(\"Justice_ballots.xlsx\")\n\nsharon <- readRDS(\"sharon_ballot.rds\")\n```\n:::\n\n\n\n# Combine all into one dataframe\n\n## Loop through all data frames and print the column names to spot inconsistencies\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nballots <- list(\n  clair = clair,\n  john = john,\n  marwa = marwa,\n  priya = priya,\n  henry = henry,\n  ian = ian,\n  betsy = betsy,\n  barrie = barrie,\n  justice = justice,\n  sharon = sharon\n)\n\nlapply(ballots, names)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$clair\n[1] \"Voter\"  \"Rank\"   \"Award\"  \"Player\"\n\n$john\n[1] \"Voter\"  \"Award\"  \"Rank\"   \"Player\"\n\n$marwa\n[1] \"Voter\"  \"Rank\"   \"Award\"  \"Player\"\n\n$priya\n[1] \"Voter\"                        \"Rank\"                        \n[3] \"Vezina Trophy\"                \"Hart Memorial Trophy\"        \n[5] \"James Norris Memorial Trophy\" \"Calder Memorial Trophy\"      \n[7] \"Frank J. Selke Trophy\"        \"Lady Byng Memorial Trophy\"   \n\n$henry\n[1] \"Voter\"  \"Award\"  \"Rank\"   \"Player\"\n\n$ian\n[1] \"Voter\"  \"Trophy\" \"Rank\"   \"Player\"\n\n$betsy\n[1] \"Voter\"  \"Award\"  \"Rank\"   \"Player\"\n\n$barrie\n[1] \"Voter\"  \"Award\"  \"Player\" \"Rank\"  \n\n$justice\n[1] \"Voter\"  \"Award\"  \"Player\" \"Rank\"  \n\n$sharon\n[1] \"Player\" \"Rank\"   \"Voter\"  \"Award\" \n```\n\n\n:::\n:::\n\n\n\n## Clean all the tidy/long ones, fix Priya's wide format, and merge!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_tidy_ballot <- function(df) {\n  df %>%\n    janitor::clean_names() %>%\n    dplyr::rename_with(~ gsub(\"trophy\", \"award\", ., ignore.case = TRUE)) %>%\n    dplyr::rename(\n      voter = voter,\n      award = award,\n      rank = rank,\n      player = player\n    ) %>%\n    dplyr::select(voter, award, rank, player)\n}\n\nclean_wide_ballot <- function(df) {\n  df %>%\n    janitor::clean_names() %>%\n    tidyr::pivot_longer(\n      cols = -c(voter, rank),\n      names_to = \"award\",\n      values_to = \"player\"\n    ) %>%\n    dplyr::mutate(rank = as.numeric(rank)) %>%\n    dplyr::select(voter, award, rank, player)\n}\n\ntidy_names <- c(\"clair\", \"john\", \"marwa\", \"henry\", \"ian\", \"betsy\", \"barrie\", \"justice\", \"sharon\")\ntidy_cleaned <- lapply(tidy_names, function(name) clean_tidy_ballot(ballots[[name]]))\npriya_cleaned <- clean_wide_ballot(ballots$priya)\nall_ballots <- dplyr::bind_rows(tidy_cleaned, priya_cleaned)\n```\n:::\n\n\n\n# Scoring the votes and rank nominees\n\n## Define the scoring system\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoint_values <- c(`1` = 10, `2` = 7, `3` = 5, `4` = 3, `5` = 1)\n```\n:::\n\n\n\n## Adding a column based on rank\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_ballots <- all_ballots %>%\n  mutate(points = point_values[as.character(rank)])\n```\n:::\n\n\n\n## Calculate total points for player each award\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_scores <- all_ballots %>%\n  group_by(award, player) %>%\n  summarise(\n    total_points = sum(points, na.rm = TRUE),\n    n_votes = n()\n  ) %>%\n  arrange(award, desc(total_points)) %>%\n  ungroup()\nprint(final_scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 249 √ó 4\n   award                  player           total_points n_votes\n   <chr>                  <chr>                   <dbl>   <int>\n 1 Calder Memorial        Kirill Marchenko           10       1\n 2 Calder Memorial        Matthew Knies               7       1\n 3 Calder Memorial        Wyatt Johnston              5       1\n 4 Calder Memorial        Marco Rossi                 3       1\n 5 Calder Memorial        JJ Peterka                  1       1\n 6 Calder Memorial Trophy Wyatt Johnston             28       4\n 7 Calder Memorial Trophy Kirill Marchenko           25       3\n 8 Calder Memorial Trophy Dylan Holloway             16       3\n 9 Calder Memorial Trophy Bobby Brink                10       1\n10 Calder Memorial Trophy Jake Sanders               10       1\n# ‚Ñπ 239 more rows\n```\n\n\n:::\n:::\n\n\n\n## Top 3 for each award\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ntop3 <- final_scores %>%\n  group_by(award) %>%\n  slice_max(total_points, n = 3) %>%\n  arrange(award, desc(total_points))\n\nprint(top3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 72 √ó 4\n# Groups:   award [18]\n   award                  player            total_points n_votes\n   <chr>                  <chr>                    <dbl>   <int>\n 1 Calder Memorial        Kirill Marchenko            10       1\n 2 Calder Memorial        Matthew Knies                7       1\n 3 Calder Memorial        Wyatt Johnston               5       1\n 4 Calder Memorial Trophy Wyatt Johnston              28       4\n 5 Calder Memorial Trophy Kirill Marchenko            25       3\n 6 Calder Memorial Trophy Dylan Holloway              16       3\n 7 Frank J. Selke Trophy  Jackson Blake               17       2\n 8 Frank J. Selke Trophy  Fabian Zetterlund           14       2\n 9 Frank J. Selke Trophy  Brandon Tanev               10       1\n10 Frank J. Selke Trophy  Cale Makar                  10       1\n# ‚Ñπ 62 more rows\n```\n\n\n:::\n:::\n\n\n\n# Rank assignment and distance calculation\n\n## Each player gets an official rank based on their total points (1st place = top scorer).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_ranks <- final_scores %>%\n  group_by(award) %>%\n  arrange(desc(total_points)) %>%\n  mutate(final_rank = row_number()) %>%\n  select(award, player, final_rank)\n```\n:::\n\n\n\n## Joining final rank to individual ballots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nballots_with_ranks <- all_ballots %>%\n  left_join(final_ranks, by = c(\"award\", \"player\"))\n```\n:::\n\n\n\n## Calculating distance from final rank\n\nA good metric could be the sum of absolute differences between a voter's rank and the final rank.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvoter_agreement <- ballots_with_ranks %>%\n  mutate(rank_diff = abs(rank - final_rank)) %>%\n  group_by(voter) %>%\n  summarise(total_difference = sum(rank_diff, na.rm = TRUE)) %>%\n  arrange(total_difference)\n```\n:::\n\n\n\n# The closest voter!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvoter_agreement %>%\n  slice_min(total_difference, n = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 2\n  voter  total_difference\n  <chr>             <dbl>\n1 Priya                 0\n2 Sharon                0\n```\n\n\n:::\n:::\n\n\n\nTurns out Priya and Sharon each had a total difference of **zero** ‚Äî meaning they *perfectly* matched the final, class-wide rankings for every award!\n\nThat‚Äôs kind of wild!\n\nAlso, shoutout to Sharon who was worried there might be a tie. Welp‚Ä¶ here‚Äôs your prophecy fulfilled!\n\n# Finally here is a ranking of everyone\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(voter_agreement)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 2\n   voter          total_difference\n   <chr>                     <dbl>\n 1 Priya                         0\n 2 Sharon                        0\n 3 John                        251\n 4 Marwa                       301\n 5 Claire                      317\n 6 Justice                     325\n 7 Ian                         342\n 8 Henry Trujillo              349\n 9 Betsy Church                387\n10 Barrie                      439\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nmax_diff <- max(voter_agreement$total_difference)\nvoter_agreement <- voter_agreement %>%\n  mutate(accuracy = max_diff - total_difference,\n         label = ifelse(total_difference == 0, \"üèÜ\", \"\"))\n\nggplot(voter_agreement, aes(x = reorder(voter, accuracy), y = accuracy)) +\n  geom_bar(stat = \"identity\", fill = \"forestgreen\") +\n  coord_flip() +\n  geom_text(aes(label = paste0(accuracy, \" \", label)), \n            hjust = -0.1, size = 5) +\n  labs(\n    title = \"Hockey Challenge: Voter Accuracy\",\n    subtitle = \"Higher accuracy scores indicate a closer match to the final ranking\",\n    x = \"Voter\",\n    y = \"Accuracy Score\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 12)\n  )\n```\n\n::: {.cell-output-display}\n![](Hockey_Challenge_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hockey_Challenge_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}